/**
 *
 * syntax-cli -g src/parser/EvaGrammar.bnf -m LALR1 -o src/parser/EvaParser.java
 *
 * Examples:
 *
 * Atom: 42, foo, bar, "Hello World"
 *
 * List: (), (+ 5 x), (print "hello")
 */

// -----------------------------------------------
// Lexical grammar (tokens):

%lex

%%

\s+                return null;

\"[^\"]*\"         return "STRING";

\d+                return "NUMBER";

[\w\-+*=!<>/]+     return "SYMBOL";

/lex

// -----------------------------------------------
// Syntactic grammar (BNF):

%{
import java.util.List;

/**
 * Expression type.
 */

enum ExpType {
    NUMBER,
    STRING,
    SYMBOL,
    LIST
}

class Exp {
    public ExpType type;
    public int number;
    public String string;
    public List<Exp> list;

    // Numbers:
    public Exp(int number) {
       this.number = number;
       type = ExpType.NUMBER;
    }

    public Exp(String strVal) {
        if (strVal.charAt(0) == '"') {
            type = ExpType.STRING;
            string = strVal.substring(1, strVal.length() - 1);
        } else {
            type = ExpType.SYMBOL;
            string = strVal;
        }
    }
    public Exp(List<Exp> list) {
       type = ExpType.LIST;
       this.list = list;
    }
}

%}

%%

Exp
  : Atom
  | List
  ;

Atom
  : NUMBER { $$ = new Exp(Integer.parseInt(String.valueOf($1))) }
  | STRING { $$ = new Exp(String.valueOf($1)) }
  | SYMBOL { $$ = new Exp(String.valueOf($1)) }
  ;

List
  : '(' ListEntries ')' { $$ = $2 }
  ;

ListEntries
  : ListEntries Exp { ((Exp) ($1)).list.add( (Exp) $2); $$ = $1 }
  | %empty            { $$ = new Exp(new ArrayList<Exp>()) }
  ;